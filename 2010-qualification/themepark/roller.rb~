#!/usr/local/bin/ruby

test_cases = gets.strip.to_i
1.upto(test_cases) do |testi|
  r, k , n =  gets.split.collect{|c| c.to_i}
  groups =  gets.split.collect{|c| c.to_i}

#  puts "R: #{r}, K: #{k}, Groups: #{groups.join(', ')}"

  revenue = 0
  rolling = []
  used = 0
  seats = 0
  while r > 0 do
    candidate = groups.first
    if (used + candidate) > k || seats == groups.size 
      #no place, let's roll
      revenue = revenue + used
      used = 0
      r -= 1
      seats = 0
    end
    used +=candidate 
    groups << groups.shift
    seats += 1
  end
  
  r.times do
  
    #fill the queue
    while  !groups.empty?  &&  ( k >= ((g = groups.shift) + used ) )  do
      used += g
      rolling << g
    end
    
    #back to the queue
    groups.unshift(g) if g + used > k

    #rock and roll
#    puts "revenue = #{revenue} , Rolling: #{rolling.join(', ')} "
    while !rolling.empty? do
       groups << rolling.shift
    end
    revenue +=used
    used = 0
  end
  puts "Case ##{testi}: #{revenue}"
end
